
unsigned long startMillis;  //some global variables available anywhere in the program
unsigned long currentMillis;

// led variables
enum ledStates { STAY, PULSE, SECOND, STAY2}; // Here we make nicknames for the different states our program supports.
enum ledStates ledState; // We define 'ledState' as type ledStates'
enum ledStates previousLedState = ledState;
int brightness = 0; // our main variable for setting the brightness of the LED
float velocity = 1.0; // the speed at which we change the brightness.
int ledPin = 9; // we use pin 9 for PWM
int p = 0; // use to keep track how often we plot
int plotFrequency = 1; // how often we plot, every Nth time.

// pot variables
int sensorPin = A0; 

// pot smoothing
const int numReadings = 10; // higher is smoother but less responsive
int readings[numReadings];      // the readings from the analog input
int readIndex = 0;              // the index of the current reading
int total = 0;                  // the running total
int average = 0;                // the average
int smoothedPot;                // the smoothed value of potentiometer

// setting up

void setupLed () {
  // put your setup code here, to run once:
  pinMode(ledPin, OUTPUT); // set ledPin as an output.
  Serial.begin(9600); // initiate the Serial monitor so we can use the Serial Plotter to graph our patterns 
}

void setupPot() {
  // setting up potentiometer 
  // put your setup code here, to run once:
  Serial.begin(9600);
  pinMode(ledPin, OUTPUT);
  pinMode(sensorPin, INPUT);

 // set all readings to 0 on start
 for (int thisReading = 0; thisReading < numReadings; thisReading++) {
    readings[thisReading] = 0;
  }
 }


void setup() {
  setupPot();
  setupLed();
}


void loop() {
  // put your main code here, to run repeatedly:
 readAndSmoothPot();
 compose();
 updateLed();
}


void compose() {
  // this is a state machine which allows us to decouple the various operations from timed loops. 
  // instead we just switch from state to state when particular conditions are met.
  // we switch states by calling the changeState() function.
  
  switch (ledState){

  case PULSE:
   plot("PULSE", brightness);
   brightness = 255;
   if (currentMillis - startMillis >= 100){
      changeState(STAY2);
      }
      
    break;

    case SECOND:
      plot("SECOND", brightness);
      brightness = 255;
      if (currentMillis - startMillis >= 100) {
        changeState(STAY);
      }
      
    break;
    
  case STAY:
    plot("STAY", brightness);
    brightness = 5;
    
    if (currentMillis - startMillis >= smoothedPot){
      if (smoothedPot <= 0) {
        brightness = 1;
        } else {
      changeState(PULSE);
      }
    }
    break;

    case STAY2:
    plot("STAY2", brightness);
    brightness = 5;
    
    if (currentMillis - startMillis >= 100){
      changeState(SECOND);
      }
    break;

  
  }
}

void readAndSmoothPot () {
  int rawPotValue = analogRead(sensorPin);
  // brightness = ldr; // don't do this
  //filtering jitteryness
  smoothedPot = smooth_sensor(rawPotValue);
}


void plot(char *state, int brightness){
    // use this function to plot a graph.
    // it will normalize the auto-scaling plotter
    if ((p % plotFrequency) == 0){
      Serial.print(state);
      Serial.print(", ");
      Serial.print(brightness);
      Serial.println(", 0, 300");
    }
    p++;
  }

void changeState(ledStates newState){
    // call to change state, will keep track of time since last state
    startMillis = millis();
    ledState = newState;
  }

void updateLed() {
  delay(10);
  analogWrite(ledPin, brightness); // between 0 --> 255
  currentMillis = millis(); //store the current time since the program started
}

int smooth_sensor(int sensor_value) {
    // subtract the last reading:
  total = total - readings[readIndex];
  // read from the sensor:
  readings[readIndex] = sensor_value;
  // add the reading to the total:
  total = total + readings[readIndex];
  // advance to the next position in the array:
  readIndex = readIndex + 1;

  // if we're at the end of the array...
  if (readIndex >= numReadings) {
    // ...wrap around to the beginning:
    readIndex = 0;
  }

  // calculate the average:
  average = total / numReadings;
  return average;
  }
